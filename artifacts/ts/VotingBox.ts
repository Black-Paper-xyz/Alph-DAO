/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as VotingBoxContractJson } from "../VotingBox.ral.json";
import { getContractByCodeHash } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace VotingBoxTypes {
  export type Fields = {
    voteTokenId: HexString;
    quorum: bigint;
    votingStart: bigint;
    votingEnd: bigint;
    votesYes: bigint;
    votesNo: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    vote: {
      params: CallContractParams<{ amount: bigint; vote: boolean }>;
      result: CallContractResult<null>;
    };
    cancelVote: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    hasVoted: {
      params: CallContractParams<{ voter: Address }>;
      result: CallContractResult<boolean>;
    };
    isVoteOnTime: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    isProposalAccepted: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> =
    Callss["length"] extends 1
      ? MultiCallResults<Callss[0]>
      : { [index in keyof Callss]: MultiCallResults<Callss[index]> };

  export interface SignExecuteMethodTable {
    vote: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        vote: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    cancelVote: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    hasVoted: {
      params: SignExecuteContractMethodParams<{ voter: Address }>;
      result: SignExecuteScriptTxResult;
    };
    isVoteOnTime: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    isProposalAccepted: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  VotingBoxInstance,
  VotingBoxTypes.Fields
> {
  encodeFields(fields: VotingBoxTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  consts = {
    ErrorCodes: {
      HasAlreadyVoted: BigInt("0"),
      HasNotVoted: BigInt("1"),
      VoteNotOnTime: BigInt("2"),
    },
  };

  at(address: string): VotingBoxInstance {
    return new VotingBoxInstance(address);
  }

  tests = {
    vote: async (
      params: TestContractParams<
        VotingBoxTypes.Fields,
        { amount: bigint; vote: boolean },
        {
          voterToVotesYes?: Map<Address, bigint>;
          voterToVotesNo?: Map<Address, bigint>;
        }
      >
    ): Promise<
      TestContractResult<
        null,
        {
          voterToVotesYes?: Map<Address, bigint>;
          voterToVotesNo?: Map<Address, bigint>;
        }
      >
    > => {
      return testMethod(this, "vote", params, getContractByCodeHash);
    },
    cancelVote: async (
      params: Omit<
        TestContractParams<
          VotingBoxTypes.Fields,
          never,
          {
            voterToVotesYes?: Map<Address, bigint>;
            voterToVotesNo?: Map<Address, bigint>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        null,
        {
          voterToVotesYes?: Map<Address, bigint>;
          voterToVotesNo?: Map<Address, bigint>;
        }
      >
    > => {
      return testMethod(this, "cancelVote", params, getContractByCodeHash);
    },
    hasVoted: async (
      params: TestContractParams<
        VotingBoxTypes.Fields,
        { voter: Address },
        {
          voterToVotesYes?: Map<Address, bigint>;
          voterToVotesNo?: Map<Address, bigint>;
        }
      >
    ): Promise<
      TestContractResult<
        boolean,
        {
          voterToVotesYes?: Map<Address, bigint>;
          voterToVotesNo?: Map<Address, bigint>;
        }
      >
    > => {
      return testMethod(this, "hasVoted", params, getContractByCodeHash);
    },
    isVoteOnTime: async (
      params: Omit<
        TestContractParams<
          VotingBoxTypes.Fields,
          never,
          {
            voterToVotesYes?: Map<Address, bigint>;
            voterToVotesNo?: Map<Address, bigint>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        boolean,
        {
          voterToVotesYes?: Map<Address, bigint>;
          voterToVotesNo?: Map<Address, bigint>;
        }
      >
    > => {
      return testMethod(this, "isVoteOnTime", params, getContractByCodeHash);
    },
    isProposalAccepted: async (
      params: Omit<
        TestContractParams<
          VotingBoxTypes.Fields,
          never,
          {
            voterToVotesYes?: Map<Address, bigint>;
            voterToVotesNo?: Map<Address, bigint>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        boolean,
        {
          voterToVotesYes?: Map<Address, bigint>;
          voterToVotesNo?: Map<Address, bigint>;
        }
      >
    > => {
      return testMethod(
        this,
        "isProposalAccepted",
        params,
        getContractByCodeHash
      );
    },
  };
}

// Use this object to test and deploy the contract
export const VotingBox = new Factory(
  Contract.fromJson(
    VotingBoxContractJson,
    "=6+9c41=1-1+f=2+a=1-1=2-4+b=1-1=2-2+d4=12-2+33=60-2+11=40+7a7e0214696e73657274206174206d617020706174683a2000=28+1=1-1=40+7a7e0214696e73657274206174206d617020706174683a2000=39-1+7=73-1+a=88+7a7e021472656d6f7665206174206d617020706174683a2000=23-1+9=88+7a7e021472656d6f7665206174206d617020706174683a2000=236",
    "d411a3ff9147446cb27bb00f28ca9d61489ffcfe4317a7f972347ee6ebe28f63",
    []
  )
);

// Use this class to interact with the blockchain
export class VotingBoxInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    voterToVotesYes: new RalphMap<Address, bigint>(
      VotingBox.contract,
      this.contractId,
      "voterToVotesYes"
    ),
    voterToVotesNo: new RalphMap<Address, bigint>(
      VotingBox.contract,
      this.contractId,
      "voterToVotesNo"
    ),
  };

  async fetchState(): Promise<VotingBoxTypes.State> {
    return fetchContractState(VotingBox, this);
  }

  view = {
    vote: async (
      params: VotingBoxTypes.CallMethodParams<"vote">
    ): Promise<VotingBoxTypes.CallMethodResult<"vote">> => {
      return callMethod(VotingBox, this, "vote", params, getContractByCodeHash);
    },
    cancelVote: async (
      params?: VotingBoxTypes.CallMethodParams<"cancelVote">
    ): Promise<VotingBoxTypes.CallMethodResult<"cancelVote">> => {
      return callMethod(
        VotingBox,
        this,
        "cancelVote",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    hasVoted: async (
      params: VotingBoxTypes.CallMethodParams<"hasVoted">
    ): Promise<VotingBoxTypes.CallMethodResult<"hasVoted">> => {
      return callMethod(
        VotingBox,
        this,
        "hasVoted",
        params,
        getContractByCodeHash
      );
    },
    isVoteOnTime: async (
      params?: VotingBoxTypes.CallMethodParams<"isVoteOnTime">
    ): Promise<VotingBoxTypes.CallMethodResult<"isVoteOnTime">> => {
      return callMethod(
        VotingBox,
        this,
        "isVoteOnTime",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    isProposalAccepted: async (
      params?: VotingBoxTypes.CallMethodParams<"isProposalAccepted">
    ): Promise<VotingBoxTypes.CallMethodResult<"isProposalAccepted">> => {
      return callMethod(
        VotingBox,
        this,
        "isProposalAccepted",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    vote: async (
      params: VotingBoxTypes.SignExecuteMethodParams<"vote">
    ): Promise<VotingBoxTypes.SignExecuteMethodResult<"vote">> => {
      return signExecuteMethod(VotingBox, this, "vote", params);
    },
    cancelVote: async (
      params: VotingBoxTypes.SignExecuteMethodParams<"cancelVote">
    ): Promise<VotingBoxTypes.SignExecuteMethodResult<"cancelVote">> => {
      return signExecuteMethod(VotingBox, this, "cancelVote", params);
    },
    hasVoted: async (
      params: VotingBoxTypes.SignExecuteMethodParams<"hasVoted">
    ): Promise<VotingBoxTypes.SignExecuteMethodResult<"hasVoted">> => {
      return signExecuteMethod(VotingBox, this, "hasVoted", params);
    },
    isVoteOnTime: async (
      params: VotingBoxTypes.SignExecuteMethodParams<"isVoteOnTime">
    ): Promise<VotingBoxTypes.SignExecuteMethodResult<"isVoteOnTime">> => {
      return signExecuteMethod(VotingBox, this, "isVoteOnTime", params);
    },
    isProposalAccepted: async (
      params: VotingBoxTypes.SignExecuteMethodParams<"isProposalAccepted">
    ): Promise<
      VotingBoxTypes.SignExecuteMethodResult<"isProposalAccepted">
    > => {
      return signExecuteMethod(VotingBox, this, "isProposalAccepted", params);
    },
  };

  async multicall<Callss extends VotingBoxTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<VotingBoxTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      VotingBox,
      this,
      callss,
      getContractByCodeHash
    )) as VotingBoxTypes.MulticallReturnType<Callss>;
  }
}
