/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as MockDAOTokenContractJson } from "../mocks/MockDAOToken.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace MockDAOTokenTypes {
  export type Fields = {
    symbol: HexString;
    name: HexString;
    decimals: bigint;
    totalSupply: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    mint: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> =
    Callss["length"] extends 1
      ? MultiCallResults<Callss[0]>
      : { [index in keyof Callss]: MultiCallResults<Callss[index]> };

  export interface SignExecuteMethodTable {
    getSymbol: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getDecimals: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    mint: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  MockDAOTokenInstance,
  MockDAOTokenTypes.Fields
> {
  encodeFields(fields: MockDAOTokenTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  at(address: string): MockDAOTokenInstance {
    return new MockDAOTokenInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<
        TestContractParamsWithoutMaps<MockDAOTokenTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getSymbol", params, getContractByCodeHash);
    },
    getName: async (
      params: Omit<
        TestContractParamsWithoutMaps<MockDAOTokenTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    getDecimals: async (
      params: Omit<
        TestContractParamsWithoutMaps<MockDAOTokenTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getDecimals", params, getContractByCodeHash);
    },
    getTotalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<MockDAOTokenTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getTotalSupply", params, getContractByCodeHash);
    },
    mint: async (
      params: TestContractParamsWithoutMaps<
        MockDAOTokenTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "mint", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const MockDAOToken = new Factory(
  Contract.fromJson(
    MockDAOTokenContractJson,
    "",
    "6ccc38206e7a4c450ecc6822b200dbf45ba10db14444dc4b9df53dd312ac02e0",
    []
  )
);

// Use this class to interact with the blockchain
export class MockDAOTokenInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MockDAOTokenTypes.State> {
    return fetchContractState(MockDAOToken, this);
  }

  view = {
    getSymbol: async (
      params?: MockDAOTokenTypes.CallMethodParams<"getSymbol">
    ): Promise<MockDAOTokenTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        MockDAOToken,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: MockDAOTokenTypes.CallMethodParams<"getName">
    ): Promise<MockDAOTokenTypes.CallMethodResult<"getName">> => {
      return callMethod(
        MockDAOToken,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: MockDAOTokenTypes.CallMethodParams<"getDecimals">
    ): Promise<MockDAOTokenTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        MockDAOToken,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: MockDAOTokenTypes.CallMethodParams<"getTotalSupply">
    ): Promise<MockDAOTokenTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        MockDAOToken,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    mint: async (
      params: MockDAOTokenTypes.CallMethodParams<"mint">
    ): Promise<MockDAOTokenTypes.CallMethodResult<"mint">> => {
      return callMethod(
        MockDAOToken,
        this,
        "mint",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getSymbol: async (
      params: MockDAOTokenTypes.SignExecuteMethodParams<"getSymbol">
    ): Promise<MockDAOTokenTypes.SignExecuteMethodResult<"getSymbol">> => {
      return signExecuteMethod(MockDAOToken, this, "getSymbol", params);
    },
    getName: async (
      params: MockDAOTokenTypes.SignExecuteMethodParams<"getName">
    ): Promise<MockDAOTokenTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(MockDAOToken, this, "getName", params);
    },
    getDecimals: async (
      params: MockDAOTokenTypes.SignExecuteMethodParams<"getDecimals">
    ): Promise<MockDAOTokenTypes.SignExecuteMethodResult<"getDecimals">> => {
      return signExecuteMethod(MockDAOToken, this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: MockDAOTokenTypes.SignExecuteMethodParams<"getTotalSupply">
    ): Promise<MockDAOTokenTypes.SignExecuteMethodResult<"getTotalSupply">> => {
      return signExecuteMethod(MockDAOToken, this, "getTotalSupply", params);
    },
    mint: async (
      params: MockDAOTokenTypes.SignExecuteMethodParams<"mint">
    ): Promise<MockDAOTokenTypes.SignExecuteMethodResult<"mint">> => {
      return signExecuteMethod(MockDAOToken, this, "mint", params);
    },
  };

  async multicall<Callss extends MockDAOTokenTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<MockDAOTokenTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      MockDAOToken,
      this,
      callss,
      getContractByCodeHash
    )) as MockDAOTokenTypes.MulticallReturnType<Callss>;
  }
}
